# DIPLOTOPIA pipeline and program descriptions

## Overview {#sec-overview}

```{=html}
<!-- learning graphviz https://quarto.org/docs/authoring/diagrams.html

https://graphviz.org/
graphviz online editor might help a bit
 -->
```

```{dot}
//| label: fig-PipelineOverview
//| fig-cap: "This is a simple graphviz graph."

digraph Pipeline_Overview {

    graph [
		label = "Diplotopia Pipeline, Tracks Overview\n\n"
		labelloc = t
		//fontsize = 20
		layout = dot
		rankdir = TB
		newrank = true
	]

    node [
		style=filled
		shape=box
        style = filled
		//shape=plaintext
	]


    edge [
		arrowsize=.5
		labeldistance=4
		penwidth=1
	]


    // Decontamination reads
    PurelyrawT  [
        label = "PURELY_RAW\n(Reads decontamination; optional)";
        color = gray;
        fontcolor = darkslategray1;
        ];


    // Trial assembly
    TryssemblyT  [
        label = "TRYSSEMBLY\n(trial of different kind of assemblies)";
        color = deeppink;
        ];

    // Decontamination contigs
    FiltercontigsT  [
        label = "FILTER_CONTIGS\n(assembly decontamination; optional)";
        color = chartreuse2;
        fontcolor = darkslategray1;
        ];

    // Comparison assemblies for choice
    CompassT  [
        label = "COMPASS\n(comparison of assemblies)";
        color = chartreuse2;
    ];

    // Diploid to haploid (should be improved)
    HaplopurgeT  [
        label = "HAPLOPURGE\n(get haploid contigs)";
        color = lightgreen;
    ];

    subgraph cluster_6 {
        style = filled;
        color = "ghostwhite"
        fontcolor = gray;
        node [style=filled];
		{FunGen VARWRRUM }
		label = "Variant Calling Tracks";

	};

    FunGen [
        label = "FunGen";
        color = pink;
    ];

    VARWRRUM [
        label = "VARWRRUM";
        color = chartreuse2;
    ];

    // Elements additional

    Haplossembly [
        label = "Choosen assembly \n (HaploSSembly)";
        style = dotted;
    ];


    // Tracks order (not subtracks)
    PurelyrawT -> TryssemblyT [style=dashed, color=grey];

    TryssemblyT -> FiltercontigsT;
    FiltercontigsT -> HaplopurgeT;

    // sub-optimal paths
    TryssemblyT -> CompassT [style=dashed, color=grey];
    FiltercontigsT -> CompassT [style=dashed, color=grey];

    HaplopurgeT -> CompassT ;

    CompassT -> Haplossembly;


    Haplossembly -> FunGen;
    Haplossembly-> VARWRRUM;


    // Legend
    subgraph cluster_666 {
        rankdir=TB;
        style = rounded;
        label = "Legend";
        color = gray;
        fontcolor = gray;
        node [syle = filled];
        edge [style = invis];

        planned -> building -> partial -> functional -> optional


	};

    planned [
        color = gray;
    ];

    building [
        label = "currently building"
        color = pink;
    ];

    partial [
        label = "partial build"
        color = deeppink;
    ];

    functional [
        color = chartreuse2;
    ];


    optional [
        label = "optional\n(font color)"
        fontcolor = darkslategray1;
        color = "ghostwhite";
    ];

}
```

```{=html}
<!-- would nbe better if nodes were of same size
https://stackoverflow.com/questions/48888032/graphviz-make-all-nodes-the-same-size-as-the-largest

would be good if in legend boxes were closer to each other
-->
```

```{=html}
<!--
See also:

General overview of the pipeline
 ![DIPLOTOPIA overview](./files/pipeline_overview.drawio.svg)

-->
```

## Track descriptions

<!-- # general description -->

<!-- #  short description each track -->

---

### PURELY_RAW: Cleaning raw reads from eventual contaminants (STATUS: DEV)

**Pre-assembly. Detection and filtering out (optional) of contaminated reads, prior to assembly.** <!-- Description

- [ ] raw reads nanopore ? -> Thomas track integration ?
- [ ] raw reads illumina ?`

#### Tools used in this track and references

References
Repositories
Manuals and other resources

-->

---

### TRYSSEMBLY: Testing different assembly methods (STATUS: DEV)

**Trial of different assemblers to obtain a suitable assembly for your purposes.**

As per today, assemblies are a model of an organisms' genome, not the truth! Testing different assemblies methods (or assemblers) might serve your purpose. Indeed, some assemblers will perform better with some organisms, while some better is other organisms. Moreover, depending on what is the ultimate goal for you to do an assembly (eg. syntheny comparison of organisms belonging to the same species, copy number variation, variant calling ....) then some methods might serve your ultimate goal better than others.

As it is difficult to predict what will work best (at least for me), then it might be usefull to try different methods rapidely. Here is a track that aims to give you some assembly options.

(Note that this track is expected to growth .... when the need arise).

Currently the methods we are using here are:

- NECAT : from NECAT assembler specialized for long reads (nanopore), [NECAT ARTICLE] and [NECAT TOOL repository]
- MASURCA : from MASURCA genome assembler, an hybrid assembler, [MASURCA FIRST ARTICLE], [MASURCA HYBRID ARTICLE] and [MASURCA TOOL repository]

[necat article]: https://www.nature.com/articles/s41467-020-20236-7
[necat tool repository]: https://github.com/xiaochuanle/NECAT
[masurca first article]: https://academic.oup.com/bioinformatics/article/29/21/2669/195975
[masurca hybrid article]: https://genome.cshlp.org/content/27/5/787
[masurca tool repository]: https://github.com/alekseyzimin/masurca

```{=html}
<!-- Description

#### Tools used in this track and references

References
Repositories
Manuals and other resources

-->
```

---

### FILTER_CONTIGS (STATUS: FUNCTIONAL)

Optional track. **Filters out contigs/scaffolds from assemblies, when those are not detected as belonging to a "positive" filtering criteria (eg. organism of interest). Employed for removal of contaminated contigs from assemblies.** Main output: decontaminated asembly sequence

![FILTER_CONTIGS track overview]

[filter_contigs track overview]: ./files/FILTER_CONTIGS.drawio.svg

This track uses [seqkit] software to split assemblies into the set of contigs for each sample, allowing high parallelization of the \[blastn\] taxonomical comparison of each contig. Blastn is used to detect a maximum of 5 matches and to provide the taxonomical identification of those matches.

[seqkit]: https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0163962

The blastn taxonomical results are then collated and used to filter out likely contaminant contig using the R-quarto script `diplotopia/bin/contigs_taxo_overview_filter.qmd`.

A "positive filter" expression (rlang) is provided by the user. Any taxonomy that is not reflected within the positive filter will be considered as contaminant. We aimed to make the choice of this expression as flexible as possible. It is eg. possible to use an expression composed of several taxonomic ranks, ensuring that we can fine tune the filtering step to obtain a "decontaminated" assembly.

<!-- TODO check how the expression is build -->

See [Filtering contigs explanations] for more details about the filtering process strategy.

[filtering contigs explanations]: ./Filtering_contigs

See also \[Installation##Obtain_necessary_external databases\], as this track require database/files to be pre-downloaded.

References - [SEQKIT article] - [BLAST article] <!-- this is the tool, where is the science ? --> - [R] - [Quarto]

[seqkit article]: https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0163962
[blast article]: https://pubmed.ncbi.nlm.nih.gov/20003500/
[r]: https://cran.r-project.org/
[quarto]: https://quarto.org/

<!-- TODO session info / packages used in R script -->

Repositories - [SEQKIT repository]

[seqkit repository]: https://github.com/shenwei356/seqkit/releases

Manuals and other resources - [NCBI Blast help]

[ncbi blast help]: https://blast.ncbi.nlm.nih.gov/doc/blast-help/

---

### COMPASS: Comparing assemblies (STATUS: FUNCTIONAL)

**Assembly comparison and evaluation - a guide to choice which assembly to use for further analyses**

This track aims to provide statistical information allowing to compare assemblies, in order to be able to make informed choice about which assembly you will use for the rest of your analyses, this depending of your purpose / criteria.

![COMPASS track overview]

[compass track overview]: ./files/COMPASS.drawio.svg

The tracks provide statistical information (main output) about: - coverage (base coverage : deeph) (QUALIMAP) with results summarized with (MULITQC) - contiguity and coverage genome (relative to a given reference genome, which can be either one assembly you select or an external assembly, or both) - In some cases it can detect missassemblies, dependent of the reference genome used (QUAST) - completeness (BUSCO): it is possible to use one or several sets of markers. \> Eg. if no specific marker are developed for the lineage that is your object of interest, you can chose to use markers from several lineages for the comparison, and see which will provide the most informative completness informaiton.

<!-- TODO : other things that should be added ? -->

A summary table for completness (BUSCO) is generated using a R-quarto script (see diplotopia/bin/busco_summary.qmd) at the end of the track.

Note that it is also possible to run FILTER_CONTIGS track in COMPASS, this is for convenience during rerun, and when you are sure you have defined your filtering expression correctly.

<!-- TODO put this part as optional ! in the pipeline-->

Eventual contamination of the assemblies is checked using a kmer approach (KRAKEN2). Note that this information is purely indicative (and a deviation of normal KRAKEN2 usage). Moreover if the organism that you are interested in in NOT included in the kraken database that is used, this will most certainly report erroneous taxon content.

See also \[Installation##Obtain_necessary_external databases\], as this track require a kraken database to be either downloaded or created specifically for your analysis. <!-- TODO check that the infor is available and correct here -->

References

- [BUSCO article]
- [QUAST article]
- [QUALIMAP article]
- [MULTIQC article]
- [SAMTOOLS article]
- [MINIMAP article]
- [BWA-MEM article]
- [KRAKEN2 article]

[busco article]: https://academic.oup.com/bioinformatics/article/31/19/3210/211866
[quast article]: https://academic.oup.com/bioinformatics/article/29/8/1072/228832
[qualimap article]: https://academic.oup.com/bioinformatics/article/28/20/2678/206551
[multiqc article]: https://academic.oup.com/bioinformatics/article/32/19/3047/2196507
[samtools article]: https://academic.oup.com/gigascience/article/10/2/giab008/6137722?login=false
[minimap article]: https://academic.oup.com/bioinformatics/article/34/18/3094/4994778
[bwa-mem article]: https://arxiv.org/abs/1303.3997
[kraken2 article]: https://genomebiology.biomedcentral.com/articles/10.1186/s13059-019-1891-0

Repositories

- [QUAST repository]
- [QUALIMAP repository]
- [BUSCO repository]
- [MULTIQC repository]
- [SAMTOOLS repository]
- [MINIMAP repository]
- [BWA repository]
- [KRAKEN2 repository]

[quast repository]: https://github.com/ablab/quast
[qualimap repository]: https://bitbucket.org/kokonech/qualimap/commits/branch/master
[busco repository]: https://gitlab.com/ezlab/busco
[multiqc repository]: https://github.com/MultiQC/MultiQC
[samtools repository]: https://github.com/samtools/samtools
[minimap repository]: https://github.com/lh3/minimap2
[bwa repository]: https://github.com/lh3/bwa
[kraken2 repository]: https://github.com/DerrickWood/kraken2

<!-- TODO need to add pavian ? make a pavian like output -->

Manuals and other resources

- [BUSCO manual]

[busco manual]: https://busco.ezlab.org/busco_userguide.html#installation-with-docker

---

### HAPLOPURGE (STATUS: FUNCTIONAL)

**From assembly to haploid assembly - retaining the haploid genome for variant calling**

! Currently only for long reads

<!-- TODO  make it available for short reads (prioritized long reads because was was most likely used for obtaining good reference) -->

The purpose of this track is to clean the chosen assembly to optain an haploid representation of the genome of a diploid organism. Ie, we aim to optain an haploid representation of the genome of a diploid organism. This haploid representation (HaploSSembly) will then be used to call variants (or any other aim where it fits) of diploid organisms, allow allowing to determine the genotype at each haploid locus. Main output: HaploSSembly (Haploid Assembly)

The original assembly, provided as input, is inspected for eventual chimera/missassembly contigs, junk (potential low copy number contaminants), repeats and haplotigs using [purge haplotigs] software. <!-- TODO re-read paper: define better  -->

[purge haplotigs]: "https://bmcbioinformatics.biomedcentral.com/articles/10.1186/s12859-018-2485-7"

![HAPLOPURGE track overview](./files/HAPLOPURGE.drawio.svg)

First, reads are mapped (using MINIMAP) to the (decontaminated) assembly <!-- if you provide it as input - should be -->. Purge Haplotigs software allows to draw an histogram that allows to evaluate the coverage of the haploid and diploid parts of the genome, which allows to determine three coverage thresholds low, mid (between the haploid and diploid pics) and high that Purge Haploitigs software will further used to attemps to classify contigs as haploid VS diploid, poliploid (eg. small repeats) or chimeric/artificial contigs, this on the basis of the proportion of haploid and diploid coverage for each contig. <!-- TODO understand better and recheck info, and reformulate -->

Based on this classification, haplotigs and other ambiguous contigs are discared from the original input assembly.

```{=html}
<!-- TODO  : THINK
NB: it also allows, by examining the difference to the completeness and size of the assembly previously obtained, to evaluate how many alleles were assembled separately
- would be an estimate
- eg can have chimeaa / remove the complete version instead of incomplete version of a gene ?
? could it be used to provide a general idea of polymorphism at the level it was given before for sapro ? hein ... brrr
-->
```

See also [HAPLOPURGE choices]

[haplopurge choices]: ./Haplopurge_choices
References

- [Purge haplotigs article]
- [MINIMAP article]

[purge haplotigs article]: https://bmcbioinformatics.biomedcentral.com/articles/10.1186/s12859-018-2485-7
[minimap article]: https://academic.oup.com/bioinformatics/article/34/18/3094/4994778

Repositories - [Purge haplotigs repository] - [MINIMAP repository]

[purge haplotigs repository]: https://bitbucket.org/mroachawri/purge_haplotigs/src/master/
[minimap repository]: https://github.com/lh3/minimap2

Manuals and other resources

---

### Variant calling tracks

```{dot}
digraph G {

    graph [
		label = "Variant Calling\nTracks Overview"
		labelloc = t
		//fontsize = 20
		layout = dot
		rankdir = TB
		newrank = true
	]

    node [
		style = filled
		shape = box
        style = filled
	]

    edge [
		arrowsize=.5
		labeldistance=4
		penwidth=1
	]

    // Fungen Track
    subgraph cluster_0 {
        style = filled;
        color = pink;
        label="FungGen";
        tata;
	};


    // VARWRRUM Track
    subgraph cluster_1 {
        style = filled;
        color = chartreuse2;
        label = "VARWRRUM";
        tata2;
    };


}
```

#### VARWRRUM: Variants At Regions Where Reference Reads Uniquely Map (STATUS: FUNCTIONAL)

**Variant calling - halpoid reference, diploid genome.**

This track prepares the reference (an HaploSSembly / haploid genome assembly) and samples for variant calling. Then it does statistical variant calling (using FreeBayes software), does variant filtering and variant normalisation of called variants; this for each sample individually but also for all samples considered as a single population.\
Main output: normalised vcf file

![VARWRRUM track overview]

[varwrrum track overview]: ./files/VARWRRUM.drawio.svg

The detailed track descriptions is provided [here]. In short, the reference is softmasked, at least for low complexity regions, <!-- TODO implement rest ? --> the reads of each sample (diploid) <!-- TODO remove the polyploid option or keep as is ? --> are mapped to it, and variants are called for each sample and globaly as a population, using solely reads that are uniquely mapped, this with [Freebayes software]. Variants are filtered, ensuring that solely variants of good quality are retained, and normalised, which allow to compare position of the call between samples. <!-- TODO read more about normalisation variants, should also maybe add phasing here? -->

[here]: ./VARWRRUM_choices

[Freebayes software]:

We implemented different statistics calculation (coverage, presence of mapping tags) at the different stages (pre, during, and after) variant calling and filtering.

As mentioned in [FREEBAYES repository], \> "Users are encouraged to examine their output and both variants which are retained and those they filter out".

[freebayes repository]: https://github.com/freebayes/freebayes

We certainly encourage this practice, as this will allow to adjust filtering criteria, and might also hint about improvement to be gained at the reads mapping filtering and/or assembly masking stages.

References - [Trim Galore citat] - [BWA-MEM article] - [SAMTOOLS article] - [SEQKIT article] - [BBTools/BBmask article] - [VT article] - [FREEBAYES article] - [purge haplotigs article] - [BCFtools article]

[trim galore citat]: https://doi.org/10.5281/zenodo.5127899
[bwa-mem article]: https://arxiv.org/abs/1303.3997
[samtools article]: https://academic.oup.com/gigascience/article/10/2/giab008/6137722?login=false
[seqkit article]: https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0163962
[bbtools/bbmask article]: https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0185056
[vt article]: https://academic.oup.com/bioinformatics/article/31/13/2202/196142
[freebayes article]: https://arxiv.org/abs/1207.3907
[purge haplotigs article]: https://bmcbioinformatics.biomedcentral.com/articles/10.1186/s12859-018-2485-7
[bcftools article]: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3198575/

Repositories - [Trim Galore repository] - [BWA repository] - [SAMTOOLS website] - [SEQKIT repository] - [BBTools/BBmask website] - [VT repository] - [FREEBAYES repository] - [purge haplotigs repository] - [BCFTools repository]

[trim galore repository]: https://github.com/FelixKrueger/TrimGalore
[bwa repository]: https://github.com/lh3/bwa
[samtools website]: https://www.htslib.org/
[seqkit repository]: https://github.com/shenwei356/seqkit/releases
[bbtools/bbmask website]: https://jgi.doe.gov/data-and-tools/software-tools/bbtools/
[vt repository]: https://github.com/atks/vt
[freebayes repository]: https://github.com/freebayes/freebayes
[purge haplotigs repository]: https://bitbucket.org/mroachawri/purge_haplotigs/src/master/
[bcftools repository]: https://github.com/samtools/bcftools

Manuals and other resources - [SAMTOOLS manual] - [BCFTools manual] - [VT documentation]

[samtools manual]: https://www.htslib.org/doc/#manual-pages
[bcftools manual]: https://samtools.github.io/bcftools/bcftools.html
[vt documentation]: https://genome.sph.umich.edu/wiki/Vt

---

## \#### FunGen

> Origin of the track (ref)

```{dot}

//| label: fig-FugGenTrack
//| fig-cap: "Overview of the variant calling track: FungGen."

digraph Pipeline_Overview {

    graph [
		label = "FunGen\n"
		labelloc = t
		//fontsize = 20
		layout = dot
		rankdir = TB
		newrank = true
    ]

    node [
		style=filled
		shape=box
        style = filled
		//shape=plaintext
	]


    edge [
		arrowsize=.5
		labeldistance=4
		penwidth=1
	]

    // FunGen detail



}
```

```{=html}
<!--
TODO

See if can find a way to annotate - even if too different - for diploid / by similarity or
I need to explore what could be done for Sapro

### 7. ANNOTATION
- haploSSembly
- Variants then ... annotation effect ?

-->
```

---

```{=html}
<!--
TODO URGENT

Determinant pathogenecity
- repeats
  - copy nb variation ?
  - pattern / type classification (homology?)

- snps
  - gwas like with unitigs ? phasing possible hum ...


-->
```

---

```{=html}
<!--
VISUALISATION

- jbrowse - manage to open files

TRY (need X11)
- https://github.com/kcleal/gw
-->
```

## References

<!-- reference so far 2024-07-30  -->

Bushnell, Brian, Jonathan Rood, and Esther Singer. “BBMerge – Accurate Paired Shotgun Read Merging via Overlap.” PLOS ONE 12, no. 10 (October 26, 2017): e0185056. https://doi.org/10.1371/journal.pone.0185056.

Camacho, Christiam, George Coulouris, Vahram Avagyan, Ning Ma, Jason Papadopoulos, Kevin Bealer, and Thomas L. Madden. “BLAST+: Architecture and Applications.” BMC Bioinformatics 10 (December 15, 2009): 421. https://doi.org/10.1186/1471-2105-10-421.

Danecek, Petr, James K Bonfield, Jennifer Liddle, John Marshall, Valeriu Ohan, Martin O Pollard, Andrew Whitwham, et al. “Twelve Years of SAMtools and BCFtools.” GigaScience 10, no. 2 (February 1, 2021): giab008. https://doi.org/10.1093/gigascience/giab008.

Ewels, Philip, Måns Magnusson, Sverker Lundin, and Max Käller. “MultiQC: Summarize Analysis Results for Multiple Tools and Samples in a Single Report.” Bioinformatics 32, no. 19 (October 1, 2016): 3047–48. https://doi.org/10.1093/bioinformatics/btw354.

García-Alcalde, Fernando, Konstantin Okonechnikov, José Carbonell, Luis M. Cruz, Stefan Götz, Sonia Tarazona, Joaquín Dopazo, Thomas F. Meyer, and Ana Conesa. “Qualimap: Evaluating next-Generation Sequencing Alignment Data.” Bioinformatics 28, no. 20 (October 15, 2012): 2678–79. https://doi.org/10.1093/bioinformatics/bts503.

Gurevich, Alexey, Vladislav Saveliev, Nikolay Vyahhi, and Glenn Tesler. “QUAST: Quality Assessment Tool for Genome Assemblies.” Bioinformatics 29, no. 8 (April 15, 2013): 1072–75. https://doi.org/10.1093/bioinformatics/btt086.

Krueger, Felix, Frankie James, Phil Ewels, Ebrahim Afyounian, and Benjamin Schuster-Boeckler. “FelixKrueger/TrimGalore: V0.6.7 - DOI via Zenodo.” Zenodo, July 23, 2021. https://doi.org/10.5281/zenodo.5127899.

Li, Heng. “A Statistical Framework for SNP Calling, Mutation Discovery, Association Mapping and Population Genetical Parameter Estimation from Sequencing Data.” Bioinformatics 27, no. 21 (November 1, 2011): 2987–93. https://doi.org/10.1093/bioinformatics/btr509.

“Aligning Sequence Reads, Clone Sequences and Assembly Contigs with BWA-MEM.” arXiv, May 26, 2013. https://doi.org/10.48550/arXiv.1303.3997.

“Minimap2: Pairwise Alignment for Nucleotide Sequences.” Bioinformatics 34, no. 18 (September 15, 2018): 3094–3100. https://doi.org/10.1093/bioinformatics/bty191.

Quarto. “Quarto.” Accessed July 30, 2024. https://quarto.org/.

“R Core Team (2024). R: A Language and Environment for Statistical Computing. R Foundation for Statistical Computing, Vienna, Austria. URL Https://Www.R-Project.Org/,” n.d.

Roach, Michael J., Simon A. Schmidt, and Anthony R. Borneman. “Purge Haplotigs: Allelic Contig Reassignment for Third-Gen Diploid Genome Assemblies.” BMC Bioinformatics 19, no. 1 (November 29, 2018): 460. https://doi.org/10.1186/s12859-018-2485-7.

Shen, Wei, Shuai Le, Yan Li, and Fuquan Hu. “SeqKit: A Cross-Platform and Ultrafast Toolkit for FASTA/Q File Manipulation.” PLOS ONE 11, no. 10 (October 5, 2016): e0163962. https://doi.org/10.1371/journal.pone.0163962.

“SeqKit: A Cross-Platform and Ultrafast Toolkit for FASTA/Q File Manipulation.” PLOS ONE 11, no. 10 (October 5, 2016): e0163962. https://doi.org/10.1371/journal.pone.0163962.

Simão, Felipe A., Robert M. Waterhouse, Panagiotis Ioannidis, Evgenia V. Kriventseva, and Evgeny M. Zdobnov. “BUSCO: Assessing Genome Assembly and Annotation Completeness with Single-Copy Orthologs.” Bioinformatics 31, no. 19 (October 1, 2015): 3210–12. https://doi.org/10.1093/bioinformatics/btv351.

Tan, Adrian, Gonçalo R. Abecasis, and Hyun Min Kang. “Unified Representation of Genetic Variants.” Bioinformatics 31, no. 13 (July 1, 2015): 2202–4. https://doi.org/10.1093/bioinformatics/btv112.

Wood, Derrick E., Jennifer Lu, and Ben Langmead. “Improved Metagenomic Analysis with Kraken 2.” Genome Biology 20, no. 1 (November 28, 2019): 257. https://doi.org/10.1186/s13059-019-1891-0.
